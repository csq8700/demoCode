var builder = WebApplication.CreateBuilder(args);

// 添加服务到容器中
builder.Services.AddControllersWithViews();

// 启用 Windows 认证
builder.Services.AddAuthentication(NegotiateDefaults.AuthenticationScheme)
    .AddNegotiate();

builder.Services.AddAuthorization(options =>
{
    // 默认策略要求用户必须通过认证
    options.FallbackPolicy = options.DefaultPolicy;
});

var app = builder.Build();

// 配置 HTTP 请求管道
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.DirectoryServices.AccountManagement;
using System.Security.Claims;

public class HomeController : Controller
{
    [Authorize]
    public IActionResult Index()
    {
        // 获取当前用户的 Windows 身份
        var windowsIdentity = User.Identity as System.Security.Principal.WindowsIdentity;

        if (windowsIdentity != null)
        {
            // 检查用户是否属于指定组
            var isInGroup = IsUserInGroup(windowsIdentity, "YourADGroupName");

            if (!isInGroup)
            {
                // 如果用户不属于指定组，跳转至错误页面
                return RedirectToAction("Error", new { message = "您不属于指定组的用户，无法访问此页面。" });
            }

            // 获取用户信息
            var userId = windowsIdentity.User.Value;
            var userName = GetUserNameFromAD(windowsIdentity);

            // 将用户信息传递给视图
            ViewBag.UserId = userId;
            ViewBag.UserName = userName;

            return View();
        }

        return RedirectToAction("Error", new { message = "无法获取用户信息。" });
    }

    public IActionResult Error(string message)
    {
        ViewBag.ErrorMessage = message;
        return View();
    }

    private bool IsUserInGroup(System.Security.Principal.WindowsIdentity identity, string groupName)
    {
        using (var context = new PrincipalContext(ContextType.Domain))
        {
            var userPrincipal = UserPrincipal.FindByIdentity(context, identity.Name);
            var groupPrincipal = GroupPrincipal.FindByIdentity(context, groupName);

            if (userPrincipal != null && groupPrincipal != null)
            {
                return userPrincipal.IsMemberOf(groupPrincipal);
            }
        }

        return false;
    }

    private string GetUserNameFromAD(System.Security.Principal.WindowsIdentity identity)
    {
        using (var context = new PrincipalContext(ContextType.Domain))
        {
            var userPrincipal = UserPrincipal.FindByIdentity(context, identity.Name);
            return userPrincipal?.DisplayName ?? identity.Name;
        }
    }
}

@{
    ViewData["Title"] = "错误";
}

<h1>错误</h1>

<p>@ViewBag.ErrorMessage</p>

<a href="@Url.Action("Index", "Home")">返回首页</a>
