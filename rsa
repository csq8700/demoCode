using System;
using System.Security.Cryptography;

public class RSAKeyGenerator
{
    public static void Main()
    {
        using (RSA rsa = RSA.Create())
        {
            // 生成公钥和私钥
            string publicKey = Convert.ToBase64String(rsa.ExportRSAPublicKey());
            string privateKey = Convert.ToBase64String(rsa.ExportRSAPrivateKey());

            Console.WriteLine("公钥（Public Key）：\n" + publicKey);
            Console.WriteLine("\n私钥（Private Key）：\n" + privateKey);
        }
    }
using System;
using System.Security.Cryptography;
using System.Text;

public class RSAEncryptor
{
    public static string Encrypt(string plainText, string publicKey)
    {
        using (RSA rsa = RSA.Create())
        {
            rsa.ImportRSAPublicKey(Convert.FromBase64String(publicKey), out _);
            byte[] encryptedData = rsa.Encrypt(Encoding.UTF8.GetBytes(plainText), RSAEncryptionPadding.OaepSHA256);
            return Convert.ToBase64String(encryptedData);
        }
    }

    public static string Decrypt(string encryptedText, string privateKey)
    {
        using (RSA rsa = RSA.Create())
        {
            rsa.ImportRSAPrivateKey(Convert.FromBase64String(privateKey), out _);
            byte[] decryptedData = rsa.Decrypt(Convert.FromBase64String(encryptedText), RSAEncryptionPadding.OaepSHA256);
            return Encoding.UTF8.GetString(decryptedData);
        }
    }
}

}