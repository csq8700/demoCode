using System.Security.Cryptography.X509Certificates;

public static string GetCertificateThumbprint(X509Certificate2 certificate)
{
    return certificate.Thumbprint;
}

using System;
using System.Security.Cryptography;
using System.Text;

public class DpapiNgHelper
{
    public static byte[] Encrypt(string plainText, string protectionDescriptor)
    {
        // 将字符串转换为字节数组
        byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);

        // 使用 DPAPI-NG 加密数据
        byte[] encryptedBytes = ProtectedData.Protect(plainBytes, null, DataProtectionScope.CurrentUser, protectionDescriptor);

        return encryptedBytes;
    }
}
public static string Decrypt(byte[] encryptedBytes, string protectionDescriptor)
{
    // 使用 DPAPI-NG 解密数据
    byte[] decryptedBytes = ProtectedData.Unprotect(encryptedBytes, null, DataProtectionScope.CurrentUser, protectionDescriptor);

    // 将字节数组转换为字符串
    string plainText = Encoding.UTF8.GetString(decryptedBytes);

    return plainText;
}

using System.Web.Mvc;

public class HomeController : Controller
{
    public ActionResult Index()
    {
        // 加载证书
        var certificate = new X509Certificate2("path/to/certificate.pfx", "password");

        // 获取证书指纹
        string thumbprint = GetCertificateThumbprint(certificate);

        // 定义保护描述符
        string protectionDescriptor = $"CERTIFICATE=HashId:{thumbprint}";

        // 原始数据
        string originalData = "This is a secret message!";

        // 加密数据
        byte[] encryptedData = DpapiNgHelper.Encrypt(originalData, protectionDescriptor);

        // 解密数据
        string decryptedData = DpapiNgHelper.Decrypt(encryptedData, protectionDescriptor);

        // 将结果传递给视图
        ViewBag.OriginalData = originalData;
        ViewBag.EncryptedData = Convert.ToBase64String(encryptedData);
        ViewBag.DecryptedData = decryptedData;

        return View();
    }

    private static string GetCertificateThumbprint(X509Certificate2 certificate)
    {
        return certificate.Thumbprint;
    }
}

# 导入 .pfx 文件到当前用户的个人存储区
$certPath = "C:\path\to\certificate.pfx"
$password = "your_password" | ConvertTo-SecureString -AsPlainText -Force
Import-PfxCertificate -FilePath $certPath -Password $password -CertStoreLocation Cert:\CurrentUser\My


# 从当前用户的个人存储区导出证书
$thumbprint = "your_certificate_thumbprint"
$exportPath = "C:\path\to\exported_certificate.pfx"
$password = "export_password" | ConvertTo-SecureString -AsPlainText -Force
$cert = Get-ChildItem -Path Cert:\CurrentUser\My\$thumbprint
Export-PfxCertificate -Cert $cert -FilePath $exportPath -Password $password


# 从当前用户的个人存储区删除证书
$thumbprint = "your_certificate_thumbprint"
Get-ChildItem -Path Cert:\CurrentUser\My\$thumbprint | Remove-Item

using System.Security.Cryptography.X509Certificates;

// 从当前用户的个人存储区加载证书
var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
store.Open(OpenFlags.ReadOnly);
var certificate = store.Certificates.Find(X509FindType.FindByThumbprint, "thumbprint", false)[0];
store.Close();


using System.Security.Cryptography.X509Certificates;

// 导入 .pfx 文件到当前用户的个人存储区
var certificate = new X509Certificate2("path/to/certificate.pfx", "password");
var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
store.Open(OpenFlags.ReadWrite);
store.Add(certificate);
store.Close();


using System.Security.Cryptography.X509Certificates;

// 从当前用户的个人存储区导出证书
var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
store.Open(OpenFlags.ReadOnly);
var certificate = store.Certificates.Find(X509FindType.FindByThumbprint, "thumbprint", false)[0];
store.Close();

byte[] exportedData = certificate.Export(X509ContentType.Pfx, "export_password");
System.IO.File.WriteAllBytes("path/to/exported_certificate.pfx", exportedData);



using System.Security.Cryptography.X509Certificates;

// 从当前用户的个人存储区删除证书
var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
store.Open(OpenFlags.ReadWrite);
var certificate = store.Certificates.Find(X509FindType.FindByThumbprint, "thumbprint", false)[0];
store.Remove(certificate);
store.Close();






