using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FileCopyWinFormsDemo
{
    public partial class Form1 : Form
    {
        private BackgroundWorker copyWorker = new BackgroundWorker();
        private string copyListFilePath = "copylist.txt";
        private string logFilePath = "copylog.txt";

        public Form1()
        {
            InitializeComponent();

            copyWorker.DoWork += CopyWorker_DoWork;
            copyWorker.RunWorkerCompleted += CopyWorker_RunWorkerCompleted;
        }

        private void CopyButton_Click(object sender, EventArgs e)
        {
            if (!copyWorker.IsBusy)
            {
                copyWorker.RunWorkerAsync();
            }
        }

        private void CopyWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            string[] copyLines = File.ReadAllLines(copyListFilePath);

            foreach (var line in copyLines)
            {
                string[] paths = line.Split(',');

                if (paths.Length == 2)
                {
                    string sourcePath = paths[0].Trim();
                    string destinationPath = paths[1].Trim();

                    LogToFile($"Copying from {sourcePath} to {destinationPath}").Wait();
                    LogToFile($"Start Time: {DateTime.Now}").Wait();

                    CopyFilesAsync(sourcePath, destinationPath).Wait();

                    LogToFile($"End Time: {DateTime.Now}").Wait();
                    LogToFile("--------------------------------------------------").Wait();
                }
            }
        }

        private async Task LogToFile(string logMessage)
        {
            using (StreamWriter logWriter = File.AppendText(logFilePath))
            {
                await logWriter.WriteLineAsync(logMessage);
            }
        }

        private Task CopyFilesAsync(string sourcePath, string destinationPath)
        {
            return Task.Run(() =>
            {
                ProcessStartInfo processInfo = new ProcessStartInfo();
                processInfo.FileName = "robocopy";
                processInfo.Arguments = $"\"{sourcePath}\" \"{destinationPath}\" /E /Z /TEE";
                processInfo.RedirectStandardOutput = true;
                processInfo.UseShellExecute = false;
                processInfo.CreateNoWindow = true;

                Process process = new Process();
                process.StartInfo = processInfo;
                process.OutputDataReceived += (s, evt) =>
                {
                    if (!String.IsNullOrEmpty(evt.Data))
                    {
                        UpdateProgress(evt.Data);
                    }
                };

                process.Start();
                process.BeginOutputReadLine();

                process.WaitForExit();
            });
        }

        private void UpdateProgress(string message)
        {
            if (InvokeRequired)
            {
                Invoke(new MethodInvoker(delegate
                {
                    textBoxProgress.AppendText(message + Environment.NewLine);
                }));
            }
            else
            {
                textBoxProgress.AppendText(message + Environment.NewLine);
            }
        }

        private void CopyWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            textBoxProgress.AppendText("File copying completed." + Environment.NewLine);
        }
    }
}